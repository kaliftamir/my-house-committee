{"version":3,"sources":["components/CommitteeNavbar.js","pages/HomePage.js","model/UserModel.js","pages/LoginPage.js","pages/SignupPage.js","pages/DashboardPage.js","pages/TenantsPage.js","components/Message.js","components/MyMessageModal.js","components/MyOldMessageModal.js","model/MessageModel.js","pages/MessagesPage.js","pages/IssuesPage.js","components/Vote.js","components/Options.js","components/MyVotingModal.js","model/VotingModel.js","pages/VotingsPage.js","App.js","serviceWorker.js","index.js"],"names":["CommitteeNavbar","props","activeUser","loginMenuItem","Nav","Link","href","signupMenuItem","logoutMenuItem","dashboardMenuItem","tenantsMenuItem","messagesMenuItem","issuesMenuItem","votingMenuItem","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","className","HomePage","Container","UserModel","parseUser","this","email","get","username","password","apartment","isTenant","isCommitteeMember","LoginPage","handleLogin","React","useState","emailInput","setEmailInput","pwdInput","setPwdInput","redirectToDashboard","setRedirectToDashboard","showInvalidCredentials","setShowInvalidCredentials","console","log","to","Form","Alert","variant","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","value","onChange","e","target","Button","onClick","Parse","User","logIn","then","user","catch","error","block","SignupPage","users","accounts","handleSignup","handleNewAccount","activeAccount","setActiveAccount","userNameSignup","setUserNameSignup","emailSignup","setEmailSignup","pwdSignup","setPwdSignup","tenantSignup","setTenantSignup","committeeMemberSignup","setCommitteeMemberSignup","apartmentSignup","setApartmentSignup","buildingSignup","setBuildingSignup","addressSignup","setAddressSignup","citySignup","setCitySignup","redirectToHome","setRedirectToHome","showInvalidUser","setShowInvalidUser","showInvalidAccount","setShowInvalidAccount","showAlertSignup","setShowAlertSignup","useEffect","set","signUp","myNewObject","Object","extend","save","result","setTimeout","lg","Check","label","checked","DashboardPage","md","TenantsPage","Message","img","title","details","priority","icon","deleteMessage","updateMessage","Accordion","Card","Header","eventKey","Body","xs","Img","src","Title","size","MyMessageModal","handleModalOpen","handleModalClose","handleNewMessage","titleInput","setTitleInput","detailsInput","setDetailsInput","priorityInput","setPriorityInput","imgInput","setImgInput","faInfoCircle","iconShow","setIconShow","imgURL","URL","createObjectURL","Modal","show","onHide","closeButton","name","event","rows","faExclamationCircle","accept","files","Image","Footer","newMessage","current","File","MyOldMessageModal","handleOldModalOpen","handleUpdateMessage","alertNotification","setAlertNotification","defaultValue","oldMessage","MessageModel","parseMessage","createdAt","_url","MessagesPage","filterInput","setFilterInput","showNewMessageModal","setShowNewMessageModal","myMessages","setMyMessages","sortedMessages","setSortedMyMessages","filteredMessages","setFilteredMessages","showOldMessageModal","setShowOldMessageModal","oldTitle","setOldTitle","oldDetails","setOldDetails","oldPriority","setOldPriority","oldImg","setOldImg","oldId","setOldId","Query","find","results","map","sortBy","string","filtertBy","showSortedMessages","sort","a","b","myMessageToShow","filter","message","includes","index","key","deletedId","object","destroy","response","indexOf","splice","document","write","JSON","stringify","handleDeleteMessage","messageId","handleOpenOldMessage","InputGroup","FormControl","aria-label","aria-describedby","faSearch","DropdownButton","Prepend","Dropdown","Item","Text","Radio","defaultChecked","Breadcrumb","concat","base64","btoa","IssuesPage","Vote","options","dueDate","votes","Options","optionsValues","blankOption","optionsState","setOptionsState","handleOptionsChange","updatedOptions","dataset","idx","val","optionId","htmlFor","data-idx","MyVotingModal","handleNewVoting","optionsInput","setOptionsInput","endDateInput","setEndDateInput","inputVals","Date","parse","newVote","VotingModel","parseVoting","VotingsPage","showNewVotingModal","setShowNewVotingModal","setVotes","myVotingToShow","vote","serverURL","initialize","App","state","jsonAccounts","bind","setState","exact","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0f0fd43.chunk.js","sourcesContent":["import React, {  } from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nfunction CommitteeNavbar (props) {\r\n \r\n    const { activeUser } = props \r\n            \r\n\r\n        // rendering the menu items depending on whether we have an active user or not\r\n         const loginMenuItem = !activeUser ? <Nav.Link href=\"#/login\">Login</Nav.Link> : null;\r\n         const signupMenuItem = !activeUser ? <Nav.Link href=\"#/signup\">Sign up</Nav.Link> : null;\r\n         const logoutMenuItem = activeUser ? <Nav.Link href=\"/\">Logout</Nav.Link> : null;\r\n         const dashboardMenuItem = activeUser ? <Nav.Link href=\"#/dashboard\">Dashboard</Nav.Link> : null;\r\n         const tenantsMenuItem = activeUser ? <Nav.Link href=\"#/tenants\">Tenants</Nav.Link> : null;\r\n         const messagesMenuItem = activeUser ? <Nav.Link href=\"#/messages\">Messages</Nav.Link> : null;\r\n         const issuesMenuItem = activeUser ? <Nav.Link href=\"#/issues\">Issues</Nav.Link> : null;\r\n         const votingMenuItem = activeUser ? <Nav.Link href=\"#/votings\">Voting</Nav.Link> : null;\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#/\">HCA Systems</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    {dashboardMenuItem}\r\n                    {tenantsMenuItem}\r\n                    {messagesMenuItem}\r\n                    {issuesMenuItem}\r\n                    {votingMenuItem}\r\n                </Nav>\r\n                <Nav className=\"ml-auto\">\r\n                    {loginMenuItem}\r\n                    {signupMenuItem}\r\n                    {logoutMenuItem}\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n    \r\n}\r\n\r\nexport default CommitteeNavbar;","import React, { } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport CommitteeNavbar from '../components/CommitteeNavbar';\r\n\r\n\r\n\r\nfunction HomePage(props) {\r\n\r\n    const {activeUser} = props \r\n        \r\n\r\n    return (\r\n        <div>\r\n            <CommitteeNavbar activeUser={activeUser}/>\r\n            \r\n                 <Container>\r\n                    <h1>Home Page</h1>\r\n                    <h4>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\r\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\r\n  nisi ut aliquip ex ea commodo consequat.</h4>\r\n                    \r\n                </Container>\r\n            \r\n\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default HomePage;","\r\nclass UserModel {\r\n\r\n    constructor(parseUser) {\r\n        \r\n        this.id = parseUser.id;\r\n        this.email = parseUser.get(\"email\");\r\n        this.username = parseUser.get(\"username\");\r\n        this.password = parseUser.get(\"password\");\r\n        this.apartment = parseUser.get(\"apartment\");\r\n        this.isTenant = parseUser.get(\"isTenant\");\r\n        this.isCommitteeMember = parseUser.get(\"isCommitteeMember\");\r\n      \r\n    }\r\n\r\n}\r\n\r\nexport default UserModel;","import React, {  } from 'react';\r\nimport { Form, Col, Row, Button, Alert } from 'react-bootstrap';\r\nimport './LoginPage.css'\r\nimport UserModel from '../model/UserModel';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Parse from 'parse';\r\n\r\n\r\n\r\nfunction LoginPage (props) {\r\n\r\n    // users props not need anymore  (JSON)\r\n    const { handleLogin } = props;\r\n    \r\n    // controlled components\r\n    const [emailInput, setEmailInput] = React.useState(\"john@john.com\")\r\n    const [pwdInput, setPwdInput] = React.useState(\"123\")    \r\n    \r\n    \r\n    const [redirectToDashboard, setRedirectToDashboard] = React.useState(false)\r\n    const [showInvalidCredentials, setShowInvalidCredentials] = React.useState(false)\r\n\r\n    \r\n    function login() {\r\n\r\n        // Pass the username and password to logIn function\r\n        Parse.User.logIn(emailInput,pwdInput).then((user) => {          \r\n            // If the login is valid: notify App and redirect to \"/dashboard\"\r\n            handleLogin(new UserModel(user));\r\n            setRedirectToDashboard(true) \r\n        }).catch(error => {          \r\n            // If the login is not valid: show an error alert\r\n            setShowInvalidCredentials(true)\r\n\r\n        })\r\n\r\n        \r\n        \r\n        // old code of JSON ---------------------------------------------------------------------\r\n        // // Check if the login is valid (if a user with the same \r\n        // // email and pwd was found in the users array)\r\n        // const userFound = users.find(user => emailInput === user.email && pwdInput === user.pwd);\r\n\r\n        // if (userFound) {\r\n        //     // If the login is valid: notify App and redirect to \"/dashboard\"\r\n        //     handleLogin(userFound);\r\n        //     setRedirectToDashboard(true) \r\n\r\n        // } else {\r\n        //     // If the login is not valid: show an error alert\r\n        //     setShowInvalidCredentials(true)\r\n        // }\r\n    }\r\n    \r\n    console.log(redirectToDashboard)  \r\n    \r\n        if (redirectToDashboard) {\r\n            return <Redirect to=\"/dashboard\" />\r\n        }\r\n\r\n\r\n    return (\r\n            <div className=\"p-login\">\r\n                <h1>Login to Committee App</h1>\r\n                or <a href=\"#/signup\">create a new account</a>\r\n                <Form>\r\n                    {showInvalidCredentials ? <Alert variant=\"danger\">\r\n                        Invalid Credientails! Incorrect email or password\r\n                    </Alert> : <Alert/>}\r\n                    <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                        <Form.Label column sm={2}>\r\n                            Email\r\n                        </Form.Label>\r\n                        <Col sm={10}>\r\n                            <Form.Control type=\"email\" placeholder=\"Email\" value={emailInput}\r\n                             onChange={(e) => (setEmailInput(e.target.value),setShowInvalidCredentials(false))}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"formHorizontalPassword\">\r\n                        <Form.Label column sm={2}>\r\n                            Password\r\n                        </Form.Label>\r\n                        <Col sm={10}>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" value={pwdInput}\r\n                             onChange={(e) => (setPwdInput(e.target.value),setShowInvalidCredentials(false))}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                            <Button type=\"button\" onClick={login} block variant=\"primary\">Login</Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default LoginPage;","import React, { useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './SignupPage.css'\r\nimport { Form, Col, Row, Button,Alert } from 'react-bootstrap';\r\nimport Parse from 'parse';\r\nimport UserModel from '../model/UserModel';\r\n\r\n\r\nfunction SignupPage(props) {\r\n    \r\n    const { users,accounts,handleSignup,handleNewAccount } = props;\r\n\r\n    //const [newUser, setNewUser] = React.useState(false)\r\n    const [activeAccount, setActiveAccount] = React.useState(false)\r\n\r\n    \r\n\r\n    // controlled components\r\n    const [userNameSignup, setUserNameSignup] = React.useState(\"tamir\")\r\n    const [emailSignup, setEmailSignup] = React.useState(\"tamir@kalif.com\")\r\n    const [pwdSignup, setPwdSignup] = React.useState(\"TamirKalif1\") \r\n    const [tenantSignup, setTenantSignup] = React.useState(true) \r\n    const [committeeMemberSignup, setCommitteeMemberSignup] = React.useState(false) \r\n    const [apartmentSignup, setApartmentSignup] = React.useState(\"4\") \r\n    const [buildingSignup, setBuildingSignup] = React.useState(\"44\") \r\n    const [addressSignup, setAddressSignup] = React.useState(\"rashi\") \r\n    const [citySignup, setCitySignup] = React.useState(\"tel-aviv\") \r\n    \r\n    const [redirectToHome, setRedirectToHome] = React.useState(false) \r\n    // alerts     \r\n    const [showInvalidUser, setShowInvalidUser] = React.useState(false)\r\n    const [showInvalidAccount, setShowInvalidAccount] = React.useState(false)\r\n    const [showAlertSignup, setShowAlertSignup] = React.useState(false)\r\n\r\n    \r\n\r\n    // // adds new account on signup when submit\r\n    //  function handleCreateAccount() {\r\n       \r\n    //     const newAccount = {                 \r\n            \r\n    //         building:buildingSignup,\r\n    //         address: addressSignup,\r\n    //         city: citySignup  \r\n    //     };\r\n            \r\n    //     handleNewAccount(newAccount);\r\n    // }\r\n    \r\n    //  function signup() {\r\n\r\n    //     const user = new Parse.User()\r\n    //     user.set('username', userNameSignup);\r\n    //     user.set('email', emailSignup);\r\n    //     user.set('apartment', apartmentSignup);\r\n    //     user.set('isTenant', true);\r\n    //     user.set('isCommitteeMember', true);\r\n    //     //user.set('accountId', new Parse.Object(\"2PKEblicxa\"));\r\n    //     user.set('password', pwdSignup);\r\n        \r\n\r\n    //     user.signUp().then((user) => {\r\n    //         // If the login is valid: notify App and redirect to \"/\"\r\n    //         setTimeout(function() {\r\n    //             setShowAlertSignup(true)\r\n                \r\n    //           }, 5000);\r\n              \r\n    //         setRedirectToHome(true)\r\n                \r\n                \r\n                \r\n    //       }).catch(error => {\r\n    //            // If user already exist: show an error alert\r\n              \r\n    //            setShowInvalidUser(true)\r\n    //            console.log(pwdSignup)\r\n    //       });\r\n        \r\n    // }\r\n\r\n    function signup() {        \r\n        setActiveAccount(true)\r\n    }\r\n    \r\n    \r\n    useEffect(() => {\r\n        \r\n        if (activeAccount) { \r\n\r\n                const user = new Parse.User()\r\n                user.set('username', userNameSignup);\r\n                user.set('email', emailSignup);\r\n                user.set('apartment', apartmentSignup);\r\n                user.set('isTenant', true);\r\n                user.set('isCommitteeMember', true);\r\n                //user.set('accountId', new Parse.Object(\"2PKEblicxa\"));\r\n                user.set('password', pwdSignup);                \r\n        \r\n                user.signUp().then((user) => {\r\n                    // If the user is valid: create new account                                  \r\n                    \r\n                    const account = Parse.Object.extend('account');\r\n                    const myNewObject = new account();\r\n                    \r\n                    myNewObject.set('building', buildingSignup);\r\n                    myNewObject.set('address', addressSignup);\r\n                    myNewObject.set('city', citySignup);\r\n                    \r\n                    myNewObject.save().then(\r\n                      (result) => {\r\n    \r\n                        // If the signup is valid: notify user and redirect to homePage\r\n                        setShowAlertSignup(true)\r\n    \r\n                        setTimeout(function() {\r\n                            setRedirectToHome(true)                          \r\n                        }, 2000);\r\n                       \r\n                      },\r\n                      (error) => {\r\n                        setShowInvalidAccount(true)\r\n    \r\n                      }\r\n                    );\r\n                    \r\n                                                            \r\n                        \r\n                }).catch(error => {\r\n                    // If user already exist: show an error alert                      \r\n                    setShowInvalidUser(true)\r\n                      \r\n                });                              \r\n\r\n\r\n        }\r\n        \r\n    }, [activeAccount])   \r\n    \r\n\r\n        if (redirectToHome) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n   \r\n    return (\r\n            <div className=\"p-signup\">\r\n                \r\n                <h1>Create a Committe Member Account</h1>\r\n                <Form>\r\n                    <Row>\r\n                         <Col lg={12} >\r\n                   \r\n                            {showAlertSignup ? <Alert className=\"signup-alert\" variant=\"success\">\r\n                                    New user was signed up\r\n                                </Alert> : <Alert></Alert>}\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n\r\n                        <Col lg={6} sm={12} >\r\n                            \r\n                            {showInvalidUser ? <Alert className=\"signup-alert\" variant=\"danger\">\r\n                            The user already exists!\r\n                            </Alert> : <Alert></Alert>}                                            \r\n\r\n                            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                                <Col sm={12}>\r\n                                <Form.Label id=\"name\">User Name:</Form.Label>                    \r\n                                <Form.Control type=\"text\" value={userNameSignup}\r\n                                        onChange={(e) => (setUserNameSignup(e.target.value))}/>\r\n                                </Col> \r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                                <Col sm={12}>\r\n                                    <Form.Label id=\"email\">Email:</Form.Label>\r\n                                    <Form.Control type=\"email\" value={emailSignup}\r\n                                        onChange={(e) => (setEmailSignup(e.target.value))}/>\r\n                                </Col>                    \r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formBasicPassword\">\r\n                                <Col sm={12}>\r\n                                <Form.Label id=\"passward\">Password:</Form.Label>                    \r\n                                <Form.Control type=\"passward\" value={pwdSignup}\r\n                                        onChange={(e) => (setPwdSignup(e.target.value))} />\r\n                                </Col>         \r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                                <Col sm={12}>\r\n                                    <Form.Label id=\"apartment\">Apartment:</Form.Label>                   \r\n                                    <Form.Control type=\"text\" value={apartmentSignup}\r\n                                        onChange={(e) => (setApartmentSignup(e.target.value))}/>\r\n                                </Col>                    \r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formBasicCheckbox\"> \r\n                                <Col sm={12}>                               \r\n                                <Form.Check type=\"checkbox\" label=\"Tenant?\" checked={tenantSignup}\r\n                                onChange={(e) => (setTenantSignup(e.target.checked))}/>\r\n                                </Col>                                \r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formBasicCheckbox\"> \r\n                                <Col sm={12}>                      \r\n                                <Form.Check type=\"checkbox\" label=\"Committee Member?\" checked={committeeMemberSignup}\r\n                                onChange={(e) => (setCommitteeMemberSignup(e.target.checked))}/> \r\n                                </Col>                               \r\n                            </Form.Group>\r\n\r\n                         \r\n                        </Col> \r\n                        <Col lg={6} sm={12}>\r\n\r\n                            {showInvalidAccount ? <Alert className=\"signup-alert\" variant=\"danger\">\r\n                            The account already exists!\r\n                            </Alert> : <Alert></Alert>} \r\n\r\n                            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                                <Col sm={12}>\r\n                                    <Form.Label id=\"building\">Building:</Form.Label>                   \r\n                                    <Form.Control type=\"text\" value={buildingSignup}\r\n                                        onChange={(e) => (setBuildingSignup(e.target.value))}/>\r\n                                </Col>                    \r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                                <Col sm={12}>\r\n                                <Form.Label id=\"address\">Address:</Form.Label>                    \r\n                                <Form.Control type=\"text\" value={addressSignup}\r\n                                        onChange={(e) => (setAddressSignup(e.target.value))}/>\r\n                                </Col>                     \r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                                <Col sm={12}>\r\n                                    <Form.Label id=\"city\">City:</Form.Label>                    \r\n                                    <Form.Control type=\"text\" value={citySignup}\r\n                                        onChange={(e) => (setCitySignup(e.target.value))}/>\r\n                                </Col>                     \r\n                            </Form.Group>\r\n                            </Col>\r\n                        </Row>     \r\n                        <Button variant=\"primary\" onClick={signup} block type=\"button\">\r\n                            Submit\r\n                        </Button>\r\n                        \r\n                          \r\n                </Form>   \r\n                \r\n\r\n            </div>\r\n    );\r\n    \r\n} \r\n\r\nexport default SignupPage;","import React, { } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport CommitteeNavbar from '../components/CommitteeNavbar';\r\nimport { Col, Row,Container } from 'react-bootstrap';\r\n\r\n\r\n\r\nfunction DashboardPage(props) {\r\n    \r\n    const { activeUser } = props;\r\n\r\n    const [newReportedIssues, setNewReportedIssues] = React.useState([])\r\n    const [overdueIssues, setOverdueIssues] = React.useState([])\r\n    const [votingPercentage, setVotingPercentage] = React.useState([])\r\n\r\n\r\n    if (!activeUser) {\r\n        return <Redirect to=\"/\" />\r\n    }   \r\n\r\n    return (\r\n        <div>\r\n          <CommitteeNavbar activeUser={activeUser}/> \r\n          <Container>\r\n            <Row>\r\n                <Col md={6}>\r\n                 <h2>New Report Issues</h2>\r\n                </Col>\r\n                <Col md={6}>\r\n                 <h2>Overdue Issues</h2>\r\n                </Col>\r\n                \r\n            </Row>\r\n            \r\n            DashboardPages-start\r\n\r\n        </Container>      \r\n          \r\n\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default DashboardPage;","import React, {  } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport CommitteeNavbar from '../components/CommitteeNavbar';\r\n\r\n\r\n\r\nfunction TenantsPage(props) {\r\n    \r\n        \r\n  const { activeUser } = props;\r\n\r\n  if (!activeUser) {\r\n      return <Redirect to=\"/\" />\r\n  }  \r\n\r\n  return (\r\n      <div>\r\n        <CommitteeNavbar activeUser={activeUser}/>\r\n        TenantsPage\r\n\r\n      </div>\r\n  );\r\n    \r\n}\r\n\r\nexport default TenantsPage;","import React, { } from 'react';\r\nimport { Card,Button,Accordion,Row,Col } from 'react-bootstrap';\r\nimport './Message.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Parse from 'parse';\r\n\r\n\r\n\r\nfunction Message(props) {\r\n\r\n    const { id,img,title,details,priority,icon,className,deleteMessage,updateMessage } = props\r\n    \r\n    \r\n      \r\n    return(\r\n\r\n        <div className=\"c-message\">\r\n\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header className=\"title\">\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                           <span className=\"title-text\">\r\n                            {title}\r\n                           </span>\r\n                             \r\n                                                    \r\n                            <FontAwesomeIcon className=\"icon\" icon={icon} />                      \r\n                           \r\n\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                        \r\n                            <Row>\r\n                                <Col xs={3}>\r\n                                    <Card.Img variant=\"top\" src={img}/>\r\n                                </Col>\r\n                                <Col xs={9}>\r\n                                    <Card.Body className=\"card-body\">\r\n                                        <Card.Title></Card.Title>\r\n                                            <div className=\"details\">\r\n                                                <Row>\r\n                                                    <Col xs={2}>\r\n                                                        Details:\r\n                                                    </Col>\r\n                                                    <Col xs={7}>\r\n                                                        {details} \r\n                                                    </Col>                                                           \r\n\r\n                                                </Row>\r\n                                                \r\n                                            </div>\r\n                                        <div> \r\n                                            <Row>\r\n                                                <Col xs={2}>\r\n                                                    Priority:\r\n                                                </Col>\r\n                                                <Col xs={7}>\r\n                                                    {priority} \r\n                                                </Col> \r\n                                                <Col xs={3}>\r\n                                                    <Button value={id} className = {className} variant=\"primary\" size=\"sm\" onClick={updateMessage}>Update</Button>\r\n                                                    <Button value={id} className = {className} variant=\"danger\" size=\"sm\" onClick={deleteMessage}>Delete</Button>  \r\n                                                </Col>                                                                                                   \r\n                                                               \r\n\r\n                                            </Row>\r\n                                                                                                          \r\n\r\n                                        </div>\r\n                                        \r\n                                                       \r\n                                    </Card.Body>\r\n                                </Col> \r\n                            </Row> \r\n\r\n                        </Card.Body>\r\n                    \r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n            \r\n            </Accordion>\r\n         \r\n\r\n        </div>\r\n\r\n        \r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React, { } from 'react';\r\nimport { Modal,Button,Row,Col,Form,Image } from 'react-bootstrap';\r\nimport { faExclamationCircle,faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport Parse from 'parse';\r\nimport './MyMessageModal.css'\r\n\r\n\r\nfunction MyMessageModal(props) {\r\n\r\n    const {handleModalOpen,handleModalClose,handleNewMessage } = props\r\n\r\n       \r\n    //controlled components\r\n    const [titleInput, setTitleInput] = React.useState(\"\")\r\n    const [detailsInput, setDetailsInput] = React.useState(\"\")\r\n    const [priorityInput, setPriorityInput] = React.useState(\"info\")\r\n    const [imgInput, setImgInput] = React.useState(null) // an object\r\n    const [iconShow, setIconShow] = React.useState(faInfoCircle)\r\n\r\n      \r\n    function handleCreateMessage () {\r\n        \r\n        //  Create Message in Parse\r\n        const Message = Parse.Object.extend('Message');\r\n        const newMessage = new Message();\r\n\r\n        newMessage.set('objectId', Parse.User.current());\r\n        newMessage.get('updatedAt', Parse.User.current());\r\n\r\n        newMessage.set('title', titleInput);\r\n        newMessage.set('details', detailsInput);\r\n        newMessage.set('priority', priorityInput);\r\n        newMessage.set('icon', iconShow);\r\n        newMessage.set('img', new Parse.File(imgInput.name, imgInput));\r\n        newMessage.set('userId', Parse.User.current());\r\n        console.log(newMessage) \r\n        // callback function - sending with the new message\r\n        handleNewMessage(newMessage) \r\n        \r\n        //  Close and clean the modal              \r\n        handleModalClose()\r\n        cleanMyModal()            \r\n        \r\n    }\r\n\r\n    function cleanMyModal() {\r\n        setTitleInput(\"\")        \r\n        setDetailsInput(\"\")\r\n        setPriorityInput(\"info\")\r\n        setImgInput(null)\r\n        setIconShow(faInfoCircle)\r\n    }\r\n\r\n    // functions to get values form each one of the inputs in the modal (controlled componentes)  \r\n    function handleTitleChange(event) {\r\n        setTitleInput(event.target.value)\r\n        \r\n    }  \r\n\r\n    function handleDetailsChange(event) {\r\n        setDetailsInput(event.target.value)\r\n        \r\n    }\r\n\r\n    function handlePriorityChange(event) {\r\n        setPriorityInput(event.target.value)\r\n\r\n        // set the relevant icon\r\n        if(event.target.value===\"Important\") {\r\n            setIconShow(faExclamationCircle)\r\n        } else {\r\n            setIconShow(faInfoCircle)\r\n        }\r\n        \r\n    }\r\n\r\n    // function handleImgChange(event) {\r\n    //     setImgInput(event.target.value)\r\n        \r\n    // }\r\n\r\n    function handleImgFileChange(event) {\r\n        // if the user select file\r\n        if(event.target.files[0]) {\r\n            setImgInput(event.target.files[0]) // syntax to get to the file - if molti need to add multi att to input\r\n\r\n\r\n        } else {\r\n            setImgInput(null)\r\n        }\r\n        \r\n    }\r\n    //--------------------------------------- \r\n    \r\n    const imgURL = imgInput ? URL.createObjectURL(imgInput) : \"\"; // temporary url\r\n    \r\n    return(\r\n        <div className=\"c-my-message-modal\">\r\n                <Modal show={handleModalOpen} onHide={handleModalClose}  size=\"lg\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Message</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form>                       \r\n\r\n                            <Form.Group as={Row} controlId=\"title\">\r\n                                <Form.Label column sm={2}>\r\n                                    Title:\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    {/* the value and name needs to be the same if you want to use a single function for onchange for all inputs */}\r\n                                    <Form.Control type=\"text\" value={titleInput} name=\"titleInput\" onChange={handleTitleChange}  />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"details\">\r\n                                <Form.Label column sm={2}>\r\n                                    Details:\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Form.Control as=\"textarea\" rows=\"5\" value={detailsInput} name=\"detailsInput\" onChange={handleDetailsChange}  />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"priority\">\r\n                                <Form.Label column sm={2}>\r\n                                    Priority:\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Form.Control as=\"select\" value={priorityInput} name=\"priortyInput\" onChange={handlePriorityChange}>\r\n                                        <option>Info</option>\r\n                                        <option>Important</option>\r\n                                    </Form.Control>   \r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"img\">\r\n                                <Form.Label column sm={2}>\r\n                                    Image URL\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Form.Control type=\"file\" accept=\"image/*\"  name=\"imgInput\" onChange={handleImgFileChange}  />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Image src={imgURL} className=\"preview\" /> \r\n                        </Form>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>                       \r\n                        <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={handleCreateMessage}>\r\n                            Create Message\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>  \r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n                \r\nexport default MyMessageModal;","import React, { } from 'react';\r\nimport { Modal,Button,Row,Col,Form,Image,Alert } from 'react-bootstrap';\r\nimport { faExclamationCircle,faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport './MyMessageModal.css'\r\n\r\n\r\n\r\nfunction MyOldMessageModal (props) {\r\n\r\n    const {title,details,priority,img,handleOldModalOpen,handleModalClose,handleUpdateMessage } = props\r\n\r\n    const [alertNotification, setAlertNotification] = React.useState(false)\r\n  \r\n       \r\n    //controlled components\r\n    const [titleInput, setTitleInput] = React.useState(\"\")\r\n    const [detailsInput, setDetailsInput] = React.useState(\"\")\r\n    const [priorityInput, setPriorityInput] = React.useState(\"\")\r\n    const [imgInput, setImgInput] = React.useState(null) // an object\r\n    const [iconShow, setIconShow] = React.useState(faInfoCircle)\r\n\r\n  \r\n\r\n    function handleCreateUpdatedMessage () {\r\n\r\n        // an object that will reload the details of old message\r\n        const oldMessage = {};\r\n    \r\n        oldMessage.title = titleInput\r\n        oldMessage.details = detailsInput\r\n        oldMessage.priority = priorityInput \r\n        oldMessage.icon = iconShow\r\n        oldMessage.img =  imgInput // need to fix\r\n\r\n        // notification to the user\r\n        setAlertNotification(true) \r\n       \r\n        // update callback function\r\n        handleUpdateMessage(oldMessage)       \r\n                \r\n\r\n        //  Close the modal after 1 sec            \r\n        \r\n        setTimeout(function() {\r\n            handleModalClose()\r\n          }, 1000);\r\n      \r\n        \r\n    }\r\n\r\n    \r\n    // functions to get values form each one of the inputs in the modal (controlled componentes)  \r\n    function handleTitleChange(event) {\r\n        setTitleInput(event.target.value)\r\n        \r\n    }  \r\n\r\n    function handleDetailsChange(event) {\r\n        setDetailsInput(event.target.value)\r\n                \r\n    }\r\n\r\n    function handlePriorityChange(event) {\r\n        setPriorityInput(event.target.value)\r\n\r\n        // set the relevant icon\r\n        if(event.target.value===\"Important\") {\r\n            setIconShow(faExclamationCircle)\r\n        } else {\r\n            setIconShow(faInfoCircle)\r\n        }\r\n        \r\n    }\r\n\r\n    function handleImgFileChange(event) {\r\n        // if the user select file\r\n        if(event.target.files[0]) {\r\n            setImgInput(event.target.files[0]) // syntax to get to the file - if molti need to add multi att to input\r\n\r\n\r\n        } else {\r\n            setImgInput(null)\r\n        }\r\n        \r\n    }\r\n    //--------------------------------------------------------------------------------------------------- \r\n    \r\n    const imgURL = imgInput ? URL.createObjectURL(imgInput) : \"\"; // temporary url\r\n    \r\n    return(\r\n        <div className=\"c-my-message-modal\">\r\n                <Modal show={handleOldModalOpen} onHide={handleModalClose}  size=\"lg\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Message</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form>\r\n\r\n                        {alertNotification ? <Alert variant=\"success\">\r\n                        Message was updated!\r\n                        </Alert> : <Alert/>}\r\n\r\n                            <Form.Group as={Row} controlId=\"title\">\r\n                                <Form.Label column sm={2}>\r\n                                    Title:\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    {/* the value and name needs to be the same if you want to use a single function for onchange for all inputs */}\r\n                                    <Form.Control type=\"text\" defaultValue={title} name=\"titleInput\" onChange={handleTitleChange}  />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"details\">\r\n                                <Form.Label column sm={2}>\r\n                                    Details:\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Form.Control as=\"textarea\" rows=\"5\" defaultValue={details} name=\"detailsInput\" onChange={handleDetailsChange}  />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"priority\">\r\n                                <Form.Label column sm={2}>\r\n                                    Priority:\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Form.Control as=\"select\" defaultValue={priority} name=\"priortyInput\" onChange={handlePriorityChange}>\r\n                                        <option>Info</option>\r\n                                        <option>Important</option>\r\n                                    </Form.Control>   \r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"img\">\r\n                                <Form.Label column sm={2}>\r\n                                    Image URL\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Form.Control type=\"file\" accept=\"image/*\"  name=\"imgInput\" onChange={handleImgFileChange}  />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Image src={img} className=\"preview\" /> \r\n                        </Form>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>                       \r\n                        <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                            Cancel\r\n                        </Button>\r\n\r\n                        <Button variant=\"primary\" onClick={handleCreateUpdatedMessage}>\r\n                            Update Message\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>  \r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n                \r\nexport default MyOldMessageModal;","class MessageModel {\r\n\r\n    constructor(parseMessage) {\r\n        \r\n        this.id = parseMessage.id;\r\n        this.createdAt = parseMessage.createdAt;\r\n        this.title = parseMessage.get(\"title\");\r\n        this.details = parseMessage.get(\"details\");\r\n        this.priority = parseMessage.get(\"priority\");\r\n        this.icon = parseMessage.get(\"icon\");\r\n        this.img = parseMessage.get(\"img\")._url;\r\n    }\r\n\r\n}\r\n\r\nexport default MessageModel;","import React, { useEffect,useState } from 'react';\r\nimport './MessagesPage.css'\r\nimport { Redirect } from 'react-router-dom';\r\nimport CommitteeNavbar from '../components/CommitteeNavbar';\r\nimport Message from '../components/Message';\r\nimport MyMessageModal from '../components/MyMessageModal';\r\nimport MyOldMessageModal from '../components/MyOldMessageModal';\r\nimport { Row,Breadcrumb,InputGroup,FormControl,Dropdown,DropdownButton,Navbar,Nav,Modal,Form,Col,Button, Container } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport Parse from 'parse'; \r\nimport MessageModel from '../model/MessageModel';\r\n\r\n\r\nfunction MessagesPage(props) {\r\n\r\n    \r\n    const { activeUser } = props;\r\n\r\n    //controlled component\r\n    const [filterInput, setFilterInput] = React.useState(\"\")\r\n\r\n    const [showNewMessageModal, setShowNewMessageModal] = React.useState(false)\r\n    const [myMessages, setMyMessages] = React.useState([])\r\n    const [sortedMessages, setSortedMyMessages] = React.useState(\"date\")\r\n    const [filteredMessages, setFilteredMessages] = React.useState(\"all\")\r\n \r\n    // states for updating message\r\n    const [showOldMessageModal, setShowOldMessageModal] = React.useState(false)\r\n    const [oldTitle, setOldTitle] = React.useState(\"\")\r\n    const [oldDetails, setOldDetails] = React.useState(\"\")\r\n    const [oldPriority, setOldPriority] = React.useState(\"\")\r\n    const [oldImg, setOldImg] = React.useState(\"\")\r\n    const [oldId, setOldId] = React.useState(\"\")\r\n\r\n   \r\n           \r\n    \r\n    function handleDeleteMessage(deletedId,message) {\r\n            \r\n        const Message = Parse.Object.extend('Message');\r\n        const query = new Parse.Query(Message);\r\n        // here you put the objectId that you want to delete\r\n        query.get(deletedId).then((object) => {\r\n            object.destroy().then((response) => {\r\n                \r\n               \r\n                // update the array of messages \r\n                const index = myMessages.indexOf(message) // get the index of the 'deleted message' object  \r\n                setMyMessages(myMessages.splice(myMessages.splice(index, 1)));  // update the array\r\n                          \r\n            \r\n            }, (error) => {\r\n                if (typeof document !== 'undefined') document.write(`Error while deleting Message: ${JSON.stringify(error)}`);\r\n                console.error('Error while deleting Message', error);\r\n            });\r\n        });\r\n    } \r\n  \r\n \r\n\r\n    //----------------------------------------------------------------------------------------------\r\n\r\n    // get all values of message we want to update in the modal\r\n    function handleOpenOldMessage(messageId,message) {\r\n\r\n        // open modal \r\n        setShowOldMessageModal(true)\r\n\r\n        const Message = Parse.Object.extend('Message');\r\n        const query = new Parse.Query(Message);\r\n        // here you put the objectId that you want to update\r\n        query.get(messageId).then((object) => {\r\n\r\n            object.save().then((response) => {\r\n                // You can use the \"get\" method to get the value of an attribute\r\n                setOldId(messageId)\r\n                setOldTitle(response.get(\"title\")) \r\n                setOldDetails(response.get(\"details\"))\r\n                setOldPriority(response.get(\"priority\")) \r\n                setOldImg(response.get(\"img\")) \r\n              \r\n                 console.log(oldId )          \r\n               \r\n            }, (error) => {\r\n                if (typeof document !== 'undefined') document.write(`Error while updating Message: ${JSON.stringify(error)}`);\r\n                console.error('Error while updating Message', error);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------\r\n\r\n    function handleUpdateMessage(oldMessage) {\r\n\r\n        \r\n        const Message = Parse.Object.extend('Message');\r\n        const query = new Parse.Query(Message);\r\n        // here you put the objectId that you want to update\r\n        query.get(oldId).then((object) => {\r\n            object.set('title', oldMessage.title);\r\n            object.set('details', oldMessage.details);\r\n            object.set('img', new Parse.File(\"resume.txt\", { base64: btoa(oldMessage.img) }));\r\n            object.set('userId', Parse.User.current());\r\n            object.set('priority', oldMessage.priority);\r\n            object.save().then((response) => {\r\n                // You can use the \"get\" method to get the value of an attribute\r\n                // Ex: response.get(\"<ATTRIBUTE_NAME>\")\r\n\r\n         \r\n            // update the array\r\n            setMyMessages(myMessages)         \r\n              \r\n               \r\n            }, (error) => {\r\n                if (typeof document !== 'undefined') document.write(`Error while updating Message: ${JSON.stringify(error)}`);\r\n                console.error('Error while updating Message', error);\r\n            });\r\n        });\r\n    }\r\n    \r\n    //---------------------------------------------------------------------------------------------\r\n    function handleNewMessage(newMessage) { \r\n              \r\n\r\n        newMessage.save().then(\r\n            (result) => {\r\n                //  Update state (messages array) with the new message\r\n                const message = new MessageModel(result);                \r\n                setMyMessages(myMessages.concat(message)) \r\n                               \r\n                \r\n            },\r\n            (error) => {\r\n                console.error('Error while creating Message: ', error);\r\n            }\r\n        );\r\n     \r\n    }\r\n    //-----------------------------------------------------------------------------------------------\r\n\r\n    function handleModalClose() {\r\n        setShowNewMessageModal(false)\r\n        setShowOldMessageModal(false)\r\n                \r\n    } \r\n\r\n    function handleModalOpen() {\r\n        setShowNewMessageModal(true)\r\n         \r\n       \r\n    }\r\n    function handleOldModalOpen() {       \r\n        setShowOldMessageModal(true)     \r\n       \r\n    }\r\n\r\n    \r\n    // function handleNewMessage(message) {\r\n\r\n    //      // Add userId to the message object in order to link it to user object 1:1\r\n    //      myMessages.userId = activeUser.id;\r\n\r\n    //     // for id I am taking the id of the last recipe in the array and adding 1\r\n    //     myMessages.id = myMessages[myMessages.length - 1].id + 1;\r\n\r\n    //     setMyMessages(myMessages.concat(message)) // add new message to the array\r\n    //     console.log(myMessages)\r\n    // }\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n       \r\n        if (activeUser) {\r\n            const Message = Parse.Object.extend('Message');\r\n            const query = new Parse.Query(Message);\r\n            //query.equalTo(\"userId\", Parse.User.current());\r\n            query.find().then(results => {\r\n                // Success - results is the array of messages\r\n                const myMessages = results.map(result => new MessageModel(result));\r\n                setMyMessages(myMessages);\r\n            }, (error) => {\r\n                console.error('Error while fetching Message', error);\r\n            });\r\n        }\r\n    }, [activeUser])  \r\n    \r\n    console.log(myMessages)\r\n\r\n    if (!activeUser) {\r\n        return <Redirect to=\"/\" />\r\n    } \r\n\r\n    //-----------------------------------------------------------------------------\r\n    \r\n    function sortBy(string) {\r\n        setSortedMyMessages(string)        \r\n        \r\n    }\r\n    \r\n    function filtertBy(string) {\r\n        setFilteredMessages(string)\r\n              \r\n    }\r\n\r\n    function handleFilterBar(event) {\r\n        setFilterInput(event.target.value)\r\n        \r\n    }  \r\n\r\n    // sort the messages \r\n    let showSortedMessages=[]\r\n    \r\n\r\n    if(sortedMessages===\"date\") { \r\n\r\n        showSortedMessages=myMessages.sort((a,b)=> a.createdAt > b.createdAt ? 1:-1)\r\n        \r\n\r\n    } else if(sortedMessages===\"priority\") {\r\n\r\n        showSortedMessages=myMessages.sort((a,b)=> a.priority > b.priority ? 1:-1)\r\n\r\n    } \r\n\r\n    // filter the messages \r\n    let showFilteredMessages=[]\r\n\r\n    //if(showSortedMessages.includes(filterInput))\r\n\r\n    if(filteredMessages===\"info\") { \r\n\r\n        showFilteredMessages=showSortedMessages.filter(message=> (message.priority===\"info\") &&\r\n         (message.title.includes(filterInput) || message.details.includes(filterInput)))\r\n\r\n    } else if(filteredMessages===\"important\") {\r\n\r\n        showFilteredMessages=showSortedMessages.filter(message=> (message.priority===\"Important\") &&\r\n        (message.title.includes(filterInput) || message.details.includes(filterInput)))\r\n\r\n    } else  {\r\n        showFilteredMessages=showSortedMessages.filter(message=> \r\n        message.title.includes(filterInput) || message.details.includes(filterInput))\r\n\r\n    }\r\n           \r\n    \r\n    \r\n    // Map my messages to UI\r\n    const myMessageToShow = showFilteredMessages.map((message,index) =>\r\n         <Message key={index} id={message.id} img={message.img} title={message.title} details={message.details}\r\n          priority={message.priority} icon={message.icon} message={message}\r\n          className={(activeUser.isCommitteeMember ? \"show-button\" : \"hide-button\")} // show/hide in case of committee member\r\n          deleteMessage={()=>handleDeleteMessage(message.id,message)}    // callback props\r\n          updateMessage={()=>handleOpenOldMessage(message.id,message)}/>) //  callback props \r\n     \r\n    \r\n\r\n    \r\n    return (\r\n        <div className=\"p-messages\">\r\n            \r\n            <CommitteeNavbar activeUser={activeUser}/>\r\n          \r\n            <Navbar expand=\"lg\">\r\n                <Navbar.Brand href=\"#/\"></Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <InputGroup className=\"mb-12\">\r\n\r\n                            <FormControl className=\"flter-bar mb-12\" placeholder=\"filter by text title and details\"\r\n                            aria-label=\"Default\"\r\n                            aria-describedby=\"inputGroup-sizing-default\" onChange={handleFilterBar}/>                           \r\n                            \r\n                     \r\n                            <FontAwesomeIcon className={\"search-icon\"} icon={faSearch} />\r\n                           \r\n                           \r\n                        </InputGroup>\r\n\r\n                        <InputGroup className=\"mb-3\">\r\n                            <DropdownButton\r\n                            as={InputGroup.Prepend}\r\n                            variant=\"outline-primary\"\r\n                            title=\"Filter by Priority\"\r\n                            id=\"input-group-dropdown-1\"\r\n                            >\r\n                            <Dropdown.Item eventKey=\"1\" value=\"all\" onClick={()=>filtertBy(\"all\")}>All</Dropdown.Item>\r\n                            <Dropdown.Item eventKey=\"2\" value=\"info\" onClick={()=>filtertBy(\"info\")}>Info</Dropdown.Item>\r\n                            <Dropdown.Item eventKey=\"3\" value=\"important\" onClick={()=>filtertBy(\"important\")}>Important</Dropdown.Item>\r\n                                                      \r\n                            </DropdownButton>             \r\n                        </InputGroup>\r\n\r\n                        <InputGroup className=\"mb-3\">\r\n                         \r\n                            <InputGroup.Prepend>\r\n\r\n                                <InputGroup.Text>Sort by:</InputGroup.Text>\r\n                                <InputGroup.Radio name=\"sort\" aria-label=\"Radio button for following text input\"\r\n                                 onChange={()=>sortBy(\"date\")} defaultChecked />\r\n                                <InputGroup.Text className=\"label\">Date</InputGroup.Text>\r\n                                <InputGroup.Radio name=\"sort\" aria-label=\"Radio button for following text input\"\r\n                                 onChange={()=>sortBy(\"priority\")} />\r\n                                <InputGroup.Text className=\"label\">Priority</InputGroup.Text>\r\n\r\n                            </InputGroup.Prepend>                  \r\n                            \r\n\r\n                        </InputGroup>\r\n                      \r\n                    </Nav>\r\n                    <Nav className=\"ml-auto\">\r\n                       \r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n\r\n            <Container>\r\n                <Row className=\"flex-container\">\r\n                    <Breadcrumb.Item className = {activeUser.isCommitteeMember ? \"new-message-btn show-button\" : \"new-message-btn hide-button\"}\r\n                      onClick={handleModalOpen}>\r\n                        New Message\r\n                    </Breadcrumb.Item>\r\n                </Row>            \r\n                {myMessageToShow}\r\n            </Container>  \r\n\r\n\r\n            <MyMessageModal handleNewMessage={handleNewMessage} handleModalOpen={showNewMessageModal}\r\n            handleModalClose={handleModalClose} />\r\n\r\n            \r\n            <MyOldMessageModal title={oldTitle} details={oldDetails} priority={oldPriority} img={oldImg}\r\n            handleUpdateMessage={handleUpdateMessage} handleOldModalOpen={showOldMessageModal}\r\n            handleModalClose={handleModalClose} />\r\n            \r\n                 \r\n\r\n\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default MessagesPage;","import React, { } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport CommitteeNavbar from '../components/CommitteeNavbar';\r\n\r\n\r\n\r\nfunction IssuesPage(props) {\r\n\r\n    \r\n    const { activeUser } = props;\r\n\r\n    if (!activeUser) {\r\n        return <Redirect to=\"/\" />\r\n    }      \r\n\r\n    return (\r\n        <div>\r\n            <CommitteeNavbar activeUser={activeUser}/>\r\n            IssuesPage\r\n\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default IssuesPage;","import React, { } from 'react';\r\nimport { Card,Button,Accordion,Row,Col } from 'react-bootstrap';\r\nimport './Message.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Parse from 'parse';\r\n\r\n\r\n\r\nfunction Vote(props) {\r\n\r\n    const { id,title,details,options,dueDate,votes } = props\r\n    \r\n    \r\n      \r\n    return(\r\n\r\n        <div className=\"c-message\">\r\n\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header className=\"title\">\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                           <span className=\"title-text\">\r\n                            {title}\r\n                           </span>\r\n                                               \r\n                           \r\n\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                        \r\n                            <Row>\r\n                                \r\n                                <Col xs={9}>\r\n                                    <Card.Body className=\"card-body\">\r\n                                        <Card.Title></Card.Title>\r\n                                            <div className=\"details\">\r\n                                                <Row>\r\n                                                    <Col xs={3}>\r\n                                                        Details:\r\n                                                    </Col>\r\n                                                    <Col xs={6}>\r\n                                                        {details}\r\n                                                    </Col>                                                           \r\n\r\n                                                </Row>\r\n                                                \r\n                                            </div>\r\n                                        <div> \r\n                                            <Row>\r\n                                                <Col xs={4}>\r\n                                                    End Date:\r\n                                                </Col>\r\n                                                <Col xs={2}>\r\n                                                    {dueDate}\r\n                                                </Col> \r\n                                                <Col xs={6}>\r\n                                                    <Button value={id} variant=\"primary\" size=\"sm\">Update End Date</Button>\r\n                                                </Col>                                                                        \r\n                                                        \r\n\r\n                                            </Row> \r\n                                            <Button>{options}</Button>                              \r\n                                                                                                          \r\n\r\n                                        </div>\r\n                                        \r\n                                                       \r\n                                    </Card.Body>\r\n                                </Col> \r\n                                <Col xs={3}>\r\n                                    <Card.Img variant=\"top\" src=\"kramer.jpg\"/>\r\n                                </Col>\r\n                            </Row> \r\n\r\n                        </Card.Body>\r\n                    \r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n            \r\n            </Accordion>\r\n         \r\n\r\n        </div>\r\n\r\n        \r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Vote;","import React, { useState } from 'react';\r\nimport { Row,Col,Form } from 'react-bootstrap';\r\n\r\nfunction Options(props) {\r\n   \r\n    const { optionsValues } = props\r\n\r\n    const blankOption = { name: '' };\r\n    const [optionsState, setOptionsState] = useState([{ ...blankOption },]);\r\n   \r\n\r\n    function addOption() {\r\n        setOptionsState([...optionsState, { ...blankOption }]);\r\n    };\r\n\r\n    // controlled component\r\n    function handleOptionsChange(e) {\r\n        const updatedOptions = [...optionsState];\r\n        updatedOptions[e.target.dataset.idx][e.target.className] = e.target.value;\r\n        setOptionsState(updatedOptions);\r\n        //console.log(optionsState[0]['name form-control'])\r\n        optionsValues(optionsState) //sending values - callback function\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            \r\n            {\r\n                optionsState.map((val, idx) => {\r\n                    const optionId = `name-${idx}`;\r\n                    \r\n                    return (\r\n                        \r\n                        <Row>\r\n                            <Col sm={10}>\r\n                            <Form.Group  key={`option-${idx}`}>    \r\n                                <Form.Label htmlFor={optionId}>{`Option #${idx + 1}:`}</Form.Label>\r\n                                \r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        name={optionId}\r\n                                        data-idx={idx}\r\n                                        id={optionId}\r\n                                        className=\"name\"\r\n                                        //value={optionsState[idx].name}                                    \r\n                                        onChange={handleOptionsChange}\r\n                                    />\r\n                            </Form.Group>\r\n                            </Col>                     \r\n                                                      \r\n                        </Row>\r\n\r\n                        // <div key={`option-${idx}`}>\r\n                        //         <label htmlFor={optionId}>{`Option #${idx + 1}`}</label>\r\n                        //         <input\r\n                        //         type=\"text\"\r\n                        //         name={optionId}\r\n                        //         data-idx={idx}\r\n                        //         id={optionId}\r\n                        //         className=\"name\" \r\n                        //         //value={optionsState[idx].name}\r\n                        //         onChange={handleOptionsChange}\r\n                        //         />\r\n                        // </div>\r\n                                                \r\n                    );\r\n                })\r\n            }\r\n            <input id=\"add-input\" type=\"button\"  value=\"+ Add option\" onClick={addOption} />\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Options;","import React, { } from 'react';\r\nimport { Modal,Button,Row,Col,Form,InputGroup } from 'react-bootstrap';\r\nimport './MyVotingModal.css'\r\nimport Parse from 'parse';\r\nimport Options from './Options';\r\n\r\n\r\nfunction MyVotingModal(props) {\r\n\r\n    const { handleModalOpen,handleModalClose,handleNewVoting } = props\r\n\r\n       \r\n    //controlled components\r\n    const [titleInput, setTitleInput] = React.useState(\"\")\r\n    const [detailsInput, setDetailsInput] = React.useState(\"\")\r\n    const [optionsInput, setOptionsInput] = React.useState([])\r\n    const [endDateInput, setEndDateInput] = React.useState(\"\") \r\n    \r\n    function handleCreateVoting()  {\r\n\r\n         // 1) Create Vote in Parse\r\n        const Vote = Parse.Object.extend('Vote');\r\n        const newVote = new Vote();\r\n\r\n        newVote.set('title', titleInput);\r\n        newVote.set('details', detailsInput);\r\n        newVote.set('options', optionsInput);\r\n        newVote.set('endDate', endDateInput);\r\n        newVote.set('votes', 0);\r\n        newVote.set('ownerId', Parse.User.current());\r\n        //newVote.set('accountId',activeUser.id);\r\n\r\n        // callback function - sending with the new voting\r\n        handleNewVoting(newVote) \r\n        \r\n        // clean the modal       \r\n        cleanMyModal() \r\n\r\n    }   \r\n    \r\n\r\n\r\n    function cleanMyModal() {\r\n        setTitleInput(\"\")        \r\n        setDetailsInput(\"\")\r\n        setOptionsInput(false)        \r\n        setEndDateInput(\"\")\r\n       \r\n    }\r\n\r\n    // functions to get values form each one of the inputs in the modal (controlled componentes)  \r\n    function handleTitleChange(event) {\r\n        setTitleInput(event.target.value)\r\n        \r\n    }  \r\n\r\n    function handleDetailsChange(event) {\r\n        setDetailsInput(event.target.value)\r\n        \r\n    }\r\n\r\n    function handleOptionsChange(inputVals) {\r\n\r\n        // from an array of objects, extract value of an options as array\r\n        let result = inputVals.map(a => a['name form-control']);\r\n        \r\n        setOptionsInput(result) \r\n        console.log(result)  \r\n\r\n    }\r\n\r\n\r\n\r\n    function handleEndDateChange(event) {        \r\n        setEndDateInput(Date.parse(event.target.value)) // convert to date\r\n        \r\n    }\r\n    //---------------------------------------------------------------------------------------\r\n    \r\n    \r\n    return(\r\n        <div className=\"c-my-voting-modal\">\r\n                <Modal show={handleModalOpen} onHide={handleModalClose}  size=\"lg\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>New Voting</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form>                       \r\n\r\n                            <Form.Group as={Row} controlId=\"title\">\r\n                                <Form.Label column sm={2}>\r\n                                    Title:\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    {/* the value and name needs to be the same if you want to use a single function for onchange for all inputs */}\r\n                                    <Form.Control type=\"text\" value={titleInput} name=\"titleInput\" onChange={handleTitleChange}  />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"details\">\r\n                                <Form.Label column sm={2}>\r\n                                    Details:\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Form.Control as=\"textarea\" rows=\"5\" value={detailsInput} name=\"detailsInput\" onChange={handleDetailsChange}  />\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"options\">\r\n                                <Form.Label column sm={2}>\r\n                                    Options:\r\n                                </Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Options optionsValues={handleOptionsChange}/>\r\n\r\n                                    {/* <InputGroup.Prepend value={optionsInput}  name=\"optionsInput\" onChange={handleOptionsChange}>\r\n\r\n                                        <InputGroup.Text>yes</InputGroup.Text>\r\n                                        <InputGroup.Radio name=\"sort\" aria-label=\"Radio button for following text input\"\r\n                                        defaultChecked />\r\n                                        <InputGroup.Text className=\"label\">no</InputGroup.Text>\r\n                                        <InputGroup.Radio name=\"sort\" aria-label=\"Radio button for following text input\"/>\r\n                                                                               \r\n                                    </InputGroup.Prepend>                                                      */}\r\n                                      \r\n                                </Col>\r\n                               \r\n                                \r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"date\">\r\n                                <Form.Label column sm={2}>\r\n                                    End Date:\r\n                                </Form.Label>\r\n                                \r\n                                <Col sm={3}>\r\n                                    <Form.Control type=\"date\" value={endDateInput} name=\"endDateInput\" onChange={handleEndDateChange}  />\r\n                                </Col> \r\n                                                                \r\n                            </Form.Group>\r\n                            \r\n                        </Form>\r\n                       \r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>                      \r\n                        \r\n                        <Button variant=\"primary\" onClick={handleCreateVoting}>\r\n                            Create \r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>  \r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n                \r\nexport default MyVotingModal;","class VotingModel {\r\n\r\n    constructor(parseVoting) {\r\n        \r\n        this.id = parseVoting.id;       \r\n        this.createdAt = parseVoting.createdAt;\r\n        this.title = parseVoting.get(\"title\");\r\n        this.details = parseVoting.get(\"details\");\r\n        this.options = parseVoting.get(\"options\");\r\n        this.dueDate = parseVoting.get(\"dueDate\");\r\n        this.votes = parseVoting.get(\"votes\");\r\n    }\r\n\r\n}\r\n\r\nexport default VotingModel; ","import React, { Component, useEffect, useState } from 'react';\r\nimport './VotingsPage.css'\r\nimport { Redirect } from 'react-router-dom';\r\nimport CommitteeNavbar from '../components/CommitteeNavbar';\r\nimport Vote from '../components/Vote';\r\nimport MyVotingModal from '../components/MyVotingModal';\r\nimport { Row,Breadcrumb,InputGroup,FormControl,Dropdown,DropdownButton,Navbar,Nav,Modal,Form,Col,Button, Container } from 'react-bootstrap';\r\nimport Parse from 'parse'; \r\nimport VotingModel from '../model/VotingModel';\r\n\r\n\r\n\r\nfunction VotingsPage(props) {\r\n\r\n    \r\n  const { activeUser } = props;\r\n\r\n  \r\n  const [showNewVotingModal, setShowNewVotingModal] = React.useState(false)\r\n  const [votes, setVotes] = React.useState([])\r\n\r\n  function handleNewVoting(newVote) { \r\n    \r\n    \r\n    newVote.save().then(\r\n        (result) => {\r\n            // 2) Update state (votes array) with the new vote\r\n            const vote = new VotingModel(result);\r\n            setVotes(votes.concat(vote))\r\n            console.log(votes)\r\n        },\r\n        (error) => {\r\n            console.error('Error while creating Vote: ', error);\r\n        }\r\n    );\r\n\r\n    // 3) Close the modal\r\n    setShowNewVotingModal(false);\r\n  }\r\n\r\n    function handleModalClose() {\r\n      setShowNewVotingModal(false)\r\n              \r\n    } \r\n\r\n    function handleModalOpen() {\r\n        setShowNewVotingModal(true)     \r\n      \r\n    }\r\n\r\n    function handleModalClose() {\r\n      setShowNewVotingModal(false)\r\n              \r\n    } \r\n\r\n    if (!activeUser) {\r\n        return <Redirect to=\"/\" />\r\n    } \r\n    \r\n    // useEffect(() => {\r\n    //   if (activeUser) {\r\n    //       const Vote = Parse.Object.extend('Vote');\r\n    //       const query = new Parse.Query(Vote);\r\n    //       query.equalTo(\"userId\", Parse.User.current());\r\n    //       query.find().then(results => {\r\n    //           // Success - results is the array of recipes\r\n    //           const votes = results.map(result => new VotingModel(result));\r\n    //           setVotes(votes);\r\n    //       }, (error) => {\r\n    //           console.error('Error while fetching Voting', error);\r\n    //       });\r\n    //   }\r\n    // }, [activeUser])\r\n\r\n\r\n\r\n    if (!activeUser) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n      // Map my votes to UI\r\n      const myVotingToShow = votes.map((vote,index) =>\r\n      <Vote key={index} id={vote.id} title={vote.title} details={vote.details}\r\n       options={vote.options} vote={vote} votes={votes}\r\n     />) \r\n\r\n  return (\r\n      <div className=\"p-votings\">\r\n        <CommitteeNavbar activeUser={activeUser}/>\r\n       \r\n        <Row>\r\n          <Col lg={6} sm={12} >\r\n            <h1>Active Votings</h1>\r\n          </Col> \r\n          <Col lg={6} sm={12} >\r\n            <h1>Votings Results</h1>\r\n          </Col>                  \r\n        </Row>\r\n\r\n        <Row>\r\n\r\n          <Col lg={6} sm={12} >\r\n        \r\n            <Breadcrumb.Item  onClick={handleModalOpen}>                     \r\n                New Voting\r\n            </Breadcrumb.Item>        \r\n            \r\n             {myVotingToShow}         \r\n            \r\n            <Vote/>\r\n          </Col>\r\n\r\n          <Col lg={6} sm={12} >\r\n            <InputGroup className=\"mb-12\">\r\n                <FormControl className=\"flter-bar mb-12\" placeholder=\"filter by text title and details\"\r\n                aria-label=\"Default\"\r\n                aria-describedby=\"inputGroup-sizing-default\"/>              \r\n                                         \r\n                           \r\n            </InputGroup>\r\n            <Vote/>\r\n          </Col>  \r\n\r\n        </Row>  \r\n\r\n        \r\n        <MyVotingModal handleNewVoting={handleNewVoting} handleModalOpen={showNewVotingModal} handleModalClose={handleModalClose} />      \r\n        \r\n\r\n      </div>\r\n  );\r\n    \r\n}\r\n\r\nexport default VotingsPage;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\n\nimport HomePage from './pages/HomePage';\nimport LoginPage from './pages/LoginPage';\nimport SignupPage from './pages/SignupPage';\nimport DashboardPage from './pages/DashboardPage';\nimport TenantsPage from './pages/TenantsPage';\nimport MessagesPage from './pages/MessagesPage';\nimport IssuesPage from './pages/IssuesPage';\nimport VotingsPage from './pages/VotingsPage';\n//import jsonUsers from './data/users.json'\nimport jsonAccounts from './data/accounts.json'\nimport Parse from 'parse';\n\n\nParse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\nParse.initialize(\n  'DeD9qobJ5ifKQgxZ7Bg3jafsGWbJvtwh6cziAfHy', // This is your Application ID\n  'L4Y3LKY3qQrMxqnEBuxk6NOfM9wGkLRsyFf6eJT3' // This is your Javascript key\n);\n\n\n// States:\n\n// activeUser - object - a User object contains the details for the active user.\n//  If there is no active user this state will hold the value of null.\n\n// activeAccount - object - an Account object contains the details for the active account.\n//  If there is no active account this state will hold the value of null.\n\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n        \n    this.state = {\n\n      activeUser: null,\n      // activeUser: {\n      //   id: 123,\n      //   name: \"John Doe\",\n      //   email: \"john@john.com\",\n      //   apartment:6,\n      //   pwd:\"123\",\n      //   isTenant: true,\n      //   isCommitteeMember: true\n      // }, \n      //activeAccount:null,\n      // activeAccount:{\n      //   \"id\": 1,\n      //       \"building\":\"44\",\n      //       \"address\": \"Rashi\",\n      //       \"city\": \"tel-Aviv\" \n      // },\n        \n     //users: jsonUsers,\n      accounts: jsonAccounts\n      \n    }\n  \n  //   this.handleLogout = this.handleLogout.bind(this);\n     this.handleLogin = this.handleLogin.bind(this);\n  //   this.handleSignup = this.handleSignup.bind(this);\n  //   this.handleNewAccount = this.handleNewAccount.bind(this);\n  //   this.handleNewRecipe = this.handleNewRecipe.bind(this);\n\n  }\n  \n\n  handleLogin(activeUser) {\n    this.setState({\n      activeUser: activeUser\n    })\n  }\n\n  // handleSignup(activeAccount) {\n  //   this.setState({\n  //     activeAccount: activeAccount\n  //   })\n  //   // this.setState({\n  //   //   activeUser: activeAccount\n  //   // })\n  // }\n\n  // handleNewAccount(account) {\n\n  //   const { activeAccount, accounts } = this.state\n\n  //   // Adding to the users object usedId and id\n  //   //account.id = activeAccount.id;\n\n  //   // for id - taking the id of the last user in the array and adding 1\n  //   account.id = accounts[accounts.length - 1].id + 1;\n\n  //   this.setState({\n  //     accounts: accounts.concat(account)\n  //   })\n  //   console.log(accounts)\n  // }\n\n  // handleLogout() {\n  //   this.setState({\n  //     activeUser: null\n  //   })\n  // }\n\n\n\n  render() {\n\n    const { activeUser,accounts } = this.state;\n\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage activeUser={activeUser} />\n          </Route>\n          <Route exact path=\"/login\">\n            <LoginPage activeUser={activeUser} handleLogin={this.handleLogin}/>\n          </Route>\n\n          <Route exact path=\"/signup\">\n            <SignupPage activeUser={activeUser}  accounts={accounts}  handleNewAccount={this.handleNewAccount}/>\n          </Route>\n\n          <Route exact path=\"/dashboard\">\n            <DashboardPage activeUser={activeUser} />\n          </Route>\n          <Route exact path=\"/tenants\">\n            <TenantsPage activeUser={activeUser}/>\n          </Route>\n          <Route exact path=\"/messages\">\n            <MessagesPage activeUser={activeUser}/>\n          </Route>\n          <Route exact path=\"/issues\">\n            <IssuesPage activeUser={activeUser}/>\n          </Route>\n          <Route exact path=\"/votings\">\n            <VotingsPage activeUser={activeUser}/>\n          </Route>  \n          <Route exact path=\"/logout\">\n            <VotingsPage activeUser={activeUser}/>\n          </Route>                 \n\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}